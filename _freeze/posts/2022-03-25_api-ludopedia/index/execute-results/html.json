{
  "hash": "be2639acd8ff1da8873248141975a459",
  "result": {
    "markdown": "---\ntitle: \"Interagindo com a API da Ludopedia\"\nsubtitle: |\n  Neste post eu mostro como interagir com a API da Ludopedia para adquirir os dados dos jogos de tabuleiro disponíveis nesse portal. Veremos que o processo é diferente daquele que usamos para explorar a API do BoardGameGeek, apesar das informações obtidas serem bastante similares. Este post servirá de referência para outras ideias que vamos desenvolver no futuro.\ndate: 03-25-2022\ndate-modified: 02-12-2024\nimage: \"images/logo_ludopedia.png\"\ncategories:\n  - web scraping\n  - boardgames\n  - r\nexecute:\n  warning: false\n  fig-align: center\n---\n\n\n\n\n# Motivação\n\nAo longo dos últimos posts, apresentei alguns _scrappers_ e [análises](https://nacmarino.netlify.app/posts/2021-12-11_notas-boardgames/) baseadas nos dados disponíveis em dois portais de jogos de tabuleiro: o [BoardGameGeek](https://nacmarino.netlify.app/posts/2021-09-17_scrapper-boardgamegeek/) e a [Ludopedia](https://nacmarino.netlify.app/posts/2021-10-24_scrapper-ludopedia/). Tudo o que foi desenvolvido focou muito nos rankings daqueles portais mas, recentemente, mostrei como podemos obter dados mais interessantes do que estes através da [API XML do BoardGameGeek](https://nacmarino.netlify.app/posts/2022-01-23_api-boardgamegeek/). A Ludopedia também oferece dados similares a esses, e que podem ser acessados através de uma REST API disponibilizada pelo portal. Assim, poderíamos usar essas APIs para obter o mesmo tipo de informação entre portais distintos, abrindo a possibilidade de desenvolvermos análises comparativas mais aprofundadas do que àquelas que já fizemos e explorar outras possibilidades.\n\nEste post mostrará o passo a passo de como interagir com a REST API da Ludopedia. Esta é uma API que necessita de autenticação OAUTH 2.0 e, portanto, começaremos mostrando como fazer esta autenticação. Na sequência, veremos como usar os _endpoints_ da API para extrair a lista de jogos e os metadados associados a eles. Com isso, espero que este post ilustre os tipos de dados que teremos à nossa disposição, além de servir de referência para a aquisição e tratamento dos dados da Ludopedia em posts futuros. Vamos ao trabalho!\n\n# Autenticação\n\nComo já comentamos, a Ludopedia oferece uma REST API que faz uso de autenticação OAUTH 2.0, fazendo com que tenhamos que ter um token de acesso para que possamos passar as requisições para a API. O processo de autenticação e o uso dos _endpoints_ da API é bem documentada, e pode ser acessada através deste [link](https://ludopedia.com.br/api/documentacao.html). No geral, a obtenção do token de acesso passa por duas etapas: a primeira é a criação de um aplicativo no site da Ludopedia que ficará responsável por gerar o token de acesso, e a segunda é a requisição do mesmo. Como tive bastante dificuldade em fazer sentido do encadeamento das etapas deste processo, vou apresentá-los abaixo e mostrar como fazer essa autenticação através do R.\n\n## Criando o Aplicativo\n\nO primeiro passo para a utilização da API é a criação de um aplicativo no portal da Ludopedia, que pode ser feita por [aqui](https://ludopedia.com.br/aplicativos). Acredito que um pré-requisito para isso é que você tenha uma conta ativa no portal da Ludopedia, que pode ser criada gratuitamente e sem muito drama. Assumindo que você já tem essa conta, está logado no portal e tenha aberto o link acima, a página que você deve cair é àquela da figura abaixo. Para criar um aplicativo, não tem mistério: é só clicar no botão verde limão onde está escrito __Novo Aplicativo__.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nmagick::image_read(path = 'images/cria_app_passo_1.png')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/cria_app_1-1.png){width=1470}\n:::\n:::\n\n\nAssim que a página seguinte for carregada, você verá um formulário conforme aquele apresentado na figura abaixo. Apesar de existirem alguns campos que podem ser preenchidos, você só precisa focar em dois deles:  \n\n+ __Nome do Aplicativo__, que será o nome que você dará para este aplicativo; e,\n+ __URI de Retorno de Autorização (Redirect URI)__, que será a _url_ para a qual o usuário do aplicativo será redirecionado após ter o acesso aprovado. Das coisas que pesquisei por aí, resolvi usar `http://localhost:1410/`.  \n\nDepois de preencher aqueles dois campos, basta clicar no _checkbox_ para concordar com o termos de uso e, então, clicar em __Gravar__.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nmagick::image_read(path = 'images/cria_app_passo_2.png')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/cria_app_2-1.png){width=1446}\n:::\n:::\n\n\nSe tudo tiver dado certo, você deverá ser levado de volta à página inicial da criação do aplicativo, mas agora perceberá que existem algumas informações adicionais. Duas delas foi você quem definiu - o nome do aplicativo (`APP`) e a URI de redirecionamento (`URIs`) -, enquanto as outras três vêm da criação do aplicativo mesmo. Destas, já temos de cara o token de acesso (`ACESS_TOKEN (Usuário)`) que pode ser guardado e usado diretamente para fazer as requisições à API (com um detalhe importante que já falaremos). A outra informação importante para se guardar é àquela do `APP_ID`, que será usada para fazer a autenticação de forma programática no R. \n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nmagick::image_read(path = 'images/cria_app_passo_3.png')\n```\n\n::: {.cell-output-display}\n![](index_files/figure-html/cria_app_3-1.png){width=1460}\n:::\n:::\n\n\nCom isso, fechamos a criação do aplicativo que nos dá acesso à API. Se quisermos consumir os dados da API, basta usar o header `AUTHORIZATION` nas requisições dos _endpoints_, passando um _string_ que será composto pela palavra `Bearer`, um espaço, e o código do token de acesso (_e.g._, `Bearer <token_de_acesso>`). Se, por outro lado, forem outras pessoas que usarão seu aplicativo, então precisaremos ter uma forma de entregar esse token de acesso à elas. É à essa tarefa que vamos passar agora.\n\n## Pegando o Token\n\nAinda seguindo a documentação da API, e simplificando o que está escrito por lá, a aquisição de um token de acesso pelo usuário é feita pelo seu direcionamento para a `url` de autorização da API - `https://ludopedia.com.br/oauth` -, junto dos parâmetros `APP_ID` e `REDIRECT URI` que você obteve ao criar o aplicativo. Nessa parte, a documentação segue em frente para explicar mais um monte de coisas sobre a forma como a requisição deve ser feita, e que acaba ficando muito confusa. Entretanto, duas instruções são importantes: (1) uma vez que a autorização é feita, a requisição de acesso do token deve ser encaminhada para a `url` `https://ludopedia.com.br/tokenrequest/` e, como resposta, (2) essa `url` retornará um arquivo JSON com o token de acesso. Vamos operacionalizar este processo usando as funções disponíveis no pacote `httr`, onde:  \n\n1. Faremos uso função `httr::oauth_endpoint` para definir os _endpoints_ de autorização e requisição do token de acesso. Para isso, definiremos os argumentos `authorize = https://ludopedia.com.br/oauth` e `access = 'https://ludopedia.com.br/tokenrequest/'`, deixando o argumento `request` como `NULL`;  \n2. Usaremos a função `httr::oauth_app` para submeter as credenciais de acesso para a autenticação, o que nos trará como resultado a chave que trocaremos posteriormente pelo token de acesso. Essa função levará como argumentos o nome do aplicativo (`appname = <nome do seu aplicativo>`) e a URI de Retorno de Autorização (`redirect_uri = <URI de retorno>`) que você criou, além do `APP_ID` que foi gerado depois que você criou o aplicativo no portal da Ludopedia (`key = <APP_ID do seu aplicativo>`); e,  \n3. Usaremos a função `httr::init_oauth2.0` para trocar a chave pelo token de acesso através dos _endpoints_ que definimos. Essa função leva dois argumentos: o objeto criado no item 1 acima irá para o argumento `endpoint`, e o objeto do item 2 irá para o argumento `app`.\n\nSe tudo estiver certo, a função `httr::init_oauth2.0` deve retornar um arquivo JSON (que você possivelmente visualizará como uma lista no R) onde um dos elementos é o `access_token`. Com isso, basta juntar este elemento com o _string_ `Bearer ` (que está dentro do elemento `token_type` no mesmo arquivo JSON), e teremos o token de acesso completo que deve ser usado nas requisições para a API. Falando nisso, vou usar a função que criamos abaixo para pegar o token de acesso que usaremos durante esse post.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# carregando pacotes\nlibrary(tidyverse) # core\nlibrary(jsonlite) # para arquivos json\nlibrary(httr) # para o scraping\nlibrary(fs) # para mexer com paths\n\n# função para fazer a autenticacao do aplicativo\npegar_access_token <- function(APP, APP_ID, URIs) {\n  \n  # setando o endpoint de acordo com os dados fornecidos na ludopedia\n  ludopedia_endpoint <- httr::oauth_endpoint(\n    request = NULL,\n    authorize = 'https://ludopedia.com.br/oauth/',\n    access = 'https://ludopedia.com.br/tokenrequest/'\n  )\n  \n  # setando as configurações do aplicativo conforme definido no site da ludopedia\n  ludopedia_app <- httr::oauth_app(\n    appname = APP,\n    key = APP_ID,\n    secret = NULL,\n    redirect_uri = URIs\n  )\n  \n  # pegando a autorizacao através do OAUTH2.0\n  autorizacao <- httr::init_oauth2.0(endpoint = ludopedia_endpoint, \n                                     app = ludopedia_app)\n  \n  # criando string do token\n  access_token <- paste0(autorizacao$token_type, ' ', autorizacao$access_token)\n  \n  # retornando o token de acesso\n  return(access_token)\n}\n\n# fazendo a autenticacao no portal\nmeu_token <- pegar_access_token(\n  APP = 'meu_app', \n  APP_ID = Sys.getenv('APP_ID'), \n  URIs = 'http://localhost:1410/'\n)\n```\n:::\n\n\n::: {.callout-important}\n## Coisas do `quarto`...\nO procedimento acima faz abrir uma janelinha no seu navegador para autorizar o acesso ao seu aplicativo. No entanto, o `quarto` não estava abrindo essa janela quando coloquei o post para renderizar. Não encontrei nada que pudesse explicar esse comportamento, tampouco algo que pudesse ajudar para deixar a função como ela estava anteriormente. Portanto, eu deixei o meu token *hard-coded* abaixo só por conta do post mesmo - mas se você for rodar o código linha a linha, o processo acima deve funcionar.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# carregando pacotes\nlibrary(tidyverse) # core\nlibrary(jsonlite) # para arquivos json\nlibrary(httr) # para o scraping\nlibrary(fs) # para mexer com paths\n\nmeu_token <- paste0('Bearer ', Sys.getenv('APP_TOKEN'))\n```\n:::\n\n\n# Interagindo com a API\n\nDe posse do token de acesso, vamos explorar as funcionalidades da API da Ludopedia. A ideia aqui não é cobrir todos os _endpoints_ disponíveis, mas apenas focar em um ou outro que serão importantes em posts futuros. Nesse contexto, trabalharemos com dois tipos principais de _enpoints_: aquele que retorna a lista dos jogos cadastrados no portal da Ludopedia e o outro que retorna os seus metadados. Vamos começar criando repositórios para armazenar cada uma das informações que formos trabalhando.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n## definindo os paths temporarios que serao usados\npath_para_jogos <- 'temporario_jogos'\npath_para_metadata <- 'temporario_metadados'\n\n## criando pasta para guardar a tabela com a lista de jogos\nif(!dir_exists(path = path_para_jogos)){\n  dir_create(path = path_para_jogos)\n}\n\n## criando pasta para guardar a tabela com os metadados dos jogos\nif(!dir_exists(path = path_para_metadata)){\n  dir_create(path = path_para_metadata)\n}\n```\n:::\n\n\n## Pegando a lista de jogos\n\nO primeiro _endpoint_ que exploraremos é aquele que retorna a lista de jogos cadastrados no portal da Ludopedia. Para facilitar o uso deste _endpoint_, escrevi a função `pega_lista_jogos` abaixo, que já traz o endereço do _endpoint_, junto do `header` com o token de acesso (_i.e._, `add_headers(AUTHORIZATION = access_token)`) e uma lista com os parâmetros da _query_ que precisa ser feita. Embora hajam alguns parâmetros disponíveis para esta _query_, focaremos em dois deles aqui: `rows`, que define a quantidade máxima de jogos que teremos como resposta por requisição (o limite é naturalmente 100 jogos por requisição, mas decidi deixar isso claro na função), e `page`, que define a página da lista dos jogos cadastrados que buscaremos (mais sobre isso no outro parágrafo). Como de costume, salvamos o arquivo JSON que recebemos de resposta em disco, de forma a acessá-lo à qualquer outro momento sem ter que ficar repetindo a requisição.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# função para pegar todos os jogos em uma dada página\npegar_lista_jogos <- function(pagina, access_token, path_salvar = NULL) {\n  # pegando os jogos da pagina selecionada\n  httr::GET('https://ludopedia.com.br/api/v1/jogos', \n            httr::add_headers(AUTHORIZATION = access_token),\n            query = list(rows = 100, page = pagina),\n            write_disk(path = stringr::str_glue(path_salvar, '/lista_jogos_pagina_{pagina}.json'),\n                       overwrite = TRUE))\n}\n\n# pegando a primeira pagina da lista de jogos\nlista <- pegar_lista_jogos(pagina = 1, access_token = meu_token, path_salvar = path_para_jogos)\n```\n:::\n\n\nO parser do arquivo que recebemos não tem muito mistério. Precisaremos carregar o arquivo de resposta salvo em disco usando a função `jsonlite::read_json` e definindo o argumento `simplifyDataFrame = TRUE`, para estruturarmos tudo o que conseguirmos como um `data.frame`. O objeto resultante dessa operação será uma lista, onde o primeiro elemento, `jogos`, será a tabela com a lista dos 100 jogos disponíveis na primeira página da API. Focando neste elemento, precisaremos de mais um tratamento para passar o `data.frame` com a lista de jogos para um `tibble` e, eventuamente, colocá-la em um formato tal que não hajam `list-columns`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# função para parsear uma pagina contendo a lista de jogos cadastrados na base da Ludopedia\nparser_lista_jogos <- function(target_path) {\n  # carregando o arquivo json\n  jsonlite::read_json(path = target_path, simplifyDataFrame = TRUE) %>% \n    # extraindo o elemento correspondente aos jogos\n    pluck('jogos') %>% \n    # colocando como tibble\n    as_tibble() %>% \n    # deixando a tibble desaninhada\n    unnest(cols = everything())\n}\n\n# aplicando o parser da lista de jogos\nparser_lista_jogos(target_path = dir_ls(path = path_para_jogos)) %>% \n  rmarkdown::paged_table()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"id_jogo\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"nm_jogo\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"nm_original\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"thumb\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"link\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"13494\",\"2\":\"Brass: Birmingham\",\"3\":\"Brass: Birmingham\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/13494_t.jpg\",\"5\":\"jogo/brass-birmingham\"},{\"1\":\"43761\",\"2\":\"Old Dragon 2ª Edição: Livro I - Regras Básicas\",\"3\":\"Old Dragon 2ª Edição: Livro I - Regras Básicas\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/43761_t.jpg\",\"5\":\"jogo/old-dragon-2-edicao-livro-i-regras-basicas\"},{\"1\":\"8176\",\"2\":\"Dungeons & Dragons (5ª Edição): Livro do Jogador\",\"3\":\"Dungeons & Dragons (5th Edition) - Player's Handbook\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/8176_t.jpg\",\"5\":\"jogo/dungeons-dragons-5th-edition-player-s-handbook\"},{\"1\":\"13749\",\"2\":\"Projeto Gaia\",\"3\":\"Gaia Project\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/13749_t.jpg\",\"5\":\"jogo/gaia-project\"},{\"1\":\"8858\",\"2\":\"Terraforming Mars\",\"3\":\"Terraforming Mars\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/8858_t.jpg\",\"5\":\"jogo/terraforming-mars\"},{\"1\":\"21102\",\"2\":\"Vampiro: A Máscara\",\"3\":\"Vampire: The Masquerade (2nd Edition)\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/21102_t.jpg\",\"5\":\"jogo/vampire-the-masquerade-2nd-edition\"},{\"1\":\"19085\",\"2\":\"Chamado de Cthulhu (7ª Edição) - Livro do Guardião\",\"3\":\"Call of Cthulhu (7th Edition) - Keeper Rulebook\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/19085_t.jpg\",\"5\":\"jogo/call-of-cthulhu-7th-edition-keeper-rulebook\"},{\"1\":\"8624\",\"2\":\"Gloomhaven\",\"3\":\"Gloomhaven\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/8624_t.jpg\",\"5\":\"jogo/gloomhaven\"},{\"1\":\"14902\",\"2\":\"Dungeons & Dragons 3.5a. Edição: Livro do Jogador\",\"3\":\"Player's Handbook (D&D 3.5e)\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/14902_t.jpg\",\"5\":\"jogo/player-s-handbook-d-d-3-5e\"},{\"1\":\"404\",\"2\":\"Terra Mystica\",\"3\":\"Terra Mystica\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/404_t.jpg\",\"5\":\"jogo/terra-mystica\"},{\"1\":\"13196\",\"2\":\"Brass: Lancashire\",\"3\":\"Brass: Lancashire\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/13196_t.jpg\",\"5\":\"jogo/brass-lancashire\"},{\"1\":\"12731\",\"2\":\"Dungeons & Dragons (5ª Edição): Kit Introdutório\",\"3\":\"Dungeons & Dragons (5th Edition) - Starter Set\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/12731_t.jpg\",\"5\":\"jogo/dungeons-dragons-5th-edition-starter-set\"},{\"1\":\"1127\",\"2\":\"Dungeons & Dragons\",\"3\":\"The New Easy to Master Dungeons & Dragons\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/1127_t.jpg\",\"5\":\"jogo/the-new-easy-to-master-dungeons-dragons\"},{\"1\":\"25048\",\"2\":\"Gloomhaven: Presas do Leão\",\"3\":\"Gloomhaven: Jaws of the Lion\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/25048_t.jpg\",\"5\":\"jogo/gloomhaven-jaws-of-the-lion\"},{\"1\":\"12713\",\"2\":\"Captive\",\"3\":\"Graphic Novel Adventures: Captive\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/12713_t.jpg\",\"5\":\"jogo/graphic-novel-adventures-captive\"},{\"1\":\"14910\",\"2\":\"Twilight Imperium (4ª Edição)\",\"3\":\"Twilight Imperium: Fourth Edition\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/14910_t.jpg\",\"5\":\"jogo/twilight-imperium-fourth-edition\"},{\"1\":\"60652\",\"2\":\"3DX\",\"3\":\"3DX\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/60652_t.jpg\",\"5\":\"jogo/3dx\"},{\"1\":\"17559\",\"2\":\"Mage Knight: Edição Definitiva\",\"3\":\"Mage Knight: Ultimate Edition\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/17559_t.jpg\",\"5\":\"jogo/mage-knight-ultimate-edition\"},{\"1\":\"29783\",\"2\":\"Great Western Trail: Segunda Edição\",\"3\":\"Great Western Trail (Second Edition)\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/29783_t.jpg\",\"5\":\"jogo/great-western-trail-second-edition\"},{\"1\":\"23555\",\"2\":\"Lobisomem: O Apocalipse\",\"3\":\"Werewolf: The Apocalypse (2nd Edition)\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/23555_t.jpg\",\"5\":\"jogo/werewolf-the-apocalypse-2nd-edition\"},{\"1\":\"8285\",\"2\":\"7 Wonders Duel\",\"3\":\"7 Wonders Duel\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/8285_t.jpg\",\"5\":\"jogo/7-wonders-duel\"},{\"1\":\"26076\",\"2\":\"A Herança de Cthulhu\",\"3\":\"A Herança de Cthulhu\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/26076_t.jpg\",\"5\":\"jogo/a-heranca-de-cthulhu\"},{\"1\":\"13411\",\"2\":\"GURPS - Módulo Básico (Segunda Edição)\",\"3\":\"GURPS Basic Set (Second Edition)\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/13411_t.jpg\",\"5\":\"jogo/gurps-basic-set-second-edition\"},{\"1\":\"9330\",\"2\":\"Star Wars: Rebellion\",\"3\":\"Star Wars: Rebellion\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/9330_t.jpg\",\"5\":\"jogo/star-wars-rebellion\"},{\"1\":\"14901\",\"2\":\"Dungeons & Dragons 3a. Edição: Livro do Jogador\",\"3\":\"Player's Handbook (D&D 3e)\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/14901_t.jpg\",\"5\":\"jogo/player-s-handbook-d-d-3e\"},{\"1\":\"20829\",\"2\":\"O Senhor dos Anéis: Jornadas na Terra Média\",\"3\":\"The Lord of the Rings: Journeys in Middle-Earth\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/20829_t.jpg\",\"5\":\"jogo/the-lord-of-the-rings-journeys-in-middle-earth\"},{\"1\":\"187\",\"2\":\"The Castles of Burgundy\",\"3\":\"The Castles of Burgundy\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/187_t.jpg\",\"5\":\"jogo/the-castles-of-burgundy\"},{\"1\":\"20275\",\"2\":\"Vampiro: A Máscara (5ª Edição)\",\"3\":\"Vampire: The Masquerade (5th Edition) - Core Book\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/20275_t.jpg\",\"5\":\"jogo/vampire-the-masquerade-5th-edition-core-book\"},{\"1\":\"10168\",\"2\":\"Great Western Trail\",\"3\":\"Great Western Trail\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/10168_t.jpg\",\"5\":\"jogo/great-western-trail\"},{\"1\":\"21129\",\"2\":\"Mago: A Ascensão\",\"3\":\"Mage: The Ascension (2nd Edition)\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/21129_t.jpg\",\"5\":\"jogo/mage-the-ascension-2nd-edition\"},{\"1\":\"27900\",\"2\":\"Hitodama - A Jornada das almas\",\"3\":\"Hitodama - A Jornada das almas\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/27900_t.jpg\",\"5\":\"jogo/hitodama-a-jornada-das-almas\"},{\"1\":\"48\",\"2\":\"Puerto Rico\",\"3\":\"Puerto Rico\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/48_t.jpg\",\"5\":\"jogo/puerto-rico\"},{\"1\":\"32437\",\"2\":\"Aventuras na Era Hiboriana RPG\",\"3\":\"Aventuras na Era Hiboriana RPG\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/32437_t.jpg\",\"5\":\"jogo/aventuras-na-era-hiboriana-rpg\"},{\"1\":\"13588\",\"2\":\"Clãs da Caledônia\",\"3\":\"Clans of Caledonia\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/13588_t.jpg\",\"5\":\"jogo/clans-of-caledonia\"},{\"1\":\"25941\",\"2\":\"Duna: Imperium\",\"3\":\"Dune: Imperium\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/25941_t.jpg\",\"5\":\"jogo/dune-imperium\"},{\"1\":\"21138\",\"2\":\"Vampire: The Dark Ages\",\"3\":\"Vampire: The Dark Ages\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/21138_t.jpg\",\"5\":\"jogo/vampire-the-dark-ages\"},{\"1\":\"7863\",\"2\":\"GURPS - Módulo Básico (Primeira Edição)\",\"3\":\"GURPS Basic Set (First Edition)\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/7863_t.jpg\",\"5\":\"jogo/gurps-basic-set-first-edition\"},{\"1\":\"20418\",\"2\":\"Wingspan\",\"3\":\"Wingspan\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/20418_t.jpg\",\"5\":\"jogo/wingspan\"},{\"1\":\"9426\",\"2\":\"Dungeon World Roleplaying Game\",\"3\":\"Dungeon World Roleplaying Game\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/9426_t.jpg\",\"5\":\"jogo/dungeon-world-roleplaying-game\"},{\"1\":\"11478\",\"2\":\"Lisboa\",\"3\":\"Lisboa\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/11478_t.jpg\",\"5\":\"jogo/lisboa\"},{\"1\":\"16912\",\"2\":\"Lobisomem\",\"3\":\"Graphic Novel Adventures: Loup Garou\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/16912_t.jpg\",\"5\":\"jogo/graphic-novel-adventures-loup-garou\"},{\"1\":\"503\",\"2\":\"Twilight Struggle\",\"3\":\"Twilight Struggle\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/503_t.jpg\",\"5\":\"jogo/twilight-struggle\"},{\"1\":\"21610\",\"2\":\"Tales from the Loop\",\"3\":\"Tales from the Loop\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/21610_t.jpg\",\"5\":\"jogo/tales-from-the-loop\"},{\"1\":\"11425\",\"2\":\"Um Banquete a Odin\",\"3\":\"A Feast for Odin\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/11425_t.jpg\",\"5\":\"jogo/a-feast-for-odin\"},{\"1\":\"22504\",\"2\":\"Pathfinder 2ª Edição - Livro Básico\",\"3\":\"Pathfinder Core Rulebook (2nd Edition)\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/22504_t.jpg\",\"5\":\"jogo/pathfinder-core-rulebook-2nd-edition\"},{\"1\":\"10959\",\"2\":\"Spirit Island\",\"3\":\"Spirit Island\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/10959_t.jpg\",\"5\":\"jogo/spirit-island\"},{\"1\":\"2614\",\"2\":\"First Quest - Advanced Dungeons & Dragons 2ª Edition\",\"3\":\"AD&D (2nd Edition) - First Quest\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/2614_t.jpg\",\"5\":\"jogo/ad-d-2nd-edition-first-quest\"},{\"1\":\"15950\",\"2\":\"Root\",\"3\":\"Root\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/15950_t.jpg\",\"5\":\"jogo/root\"},{\"1\":\"6764\",\"2\":\"Scythe\",\"3\":\"Scythe\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/6764_t.jpg\",\"5\":\"jogo/scythe\"},{\"1\":\"8149\",\"2\":\"Star Wars: Fronteira do Império - Livro Básico\",\"3\":\"Star Wars: Edge of the Empire Core Rulebook\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/8149_t.jpg\",\"5\":\"jogo/star-wars-edge-of-the-empire-core-rulebook\"},{\"1\":\"433\",\"2\":\"Guerra do Anel (Segunda Edição)\",\"3\":\"War of the Ring (second edition)\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/433_t.jpg\",\"5\":\"jogo/war-of-the-ring-second-edition\"},{\"1\":\"12600\",\"2\":\"Pathfinder RPG: Livro Básico\",\"3\":\"Pathfinder Roleplaying Game Core Rulebook (1st Ed)\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/12600_t.jpg\",\"5\":\"jogo/pathfinder-roleplaying-game-core-rulebook-1st-ed\"},{\"1\":\"1500\",\"2\":\"Old Dragon: Módulo Básico\",\"3\":\"Old Dragon: Módulo Básico\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/1500_t.jpg\",\"5\":\"jogo/old-dragon-modulo-basico\"},{\"1\":\"23515\",\"2\":\"Zombicide: Segunda Edição\",\"3\":\"Zombicide: Second Edition\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/23515_t.jpg\",\"5\":\"jogo/zombicide-second-edition\"},{\"1\":\"11112\",\"2\":\"Mansions of Madness (2ª Edição)\",\"3\":\"Mansions of Madness: Second Edition\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/11112_t.jpg\",\"5\":\"jogo/mansions-of-madness-second-edition\"},{\"1\":\"11110\",\"2\":\"Tormenta RPG - Edição Revisada\",\"3\":\"Tormenta RPG - Edição Revisada\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/11110_t.jpg\",\"5\":\"jogo/tormenta-rpg-edicao-revisada\"},{\"1\":\"24301\",\"2\":\"Clash of Cultures: Monumental Edition\",\"3\":\"Clash of Cultures: Monumental Edition\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/24301_t.jpg\",\"5\":\"jogo/clash-of-cultures-monumental-edition\"},{\"1\":\"35597\",\"2\":\"Nessus - Jogo Rápido\",\"3\":\"Nessus - Jogo Rápido\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/35597_t.jpg\",\"5\":\"jogo/nessus-jogo-rapido\"},{\"1\":\"5058\",\"2\":\"Five Tribes\",\"3\":\"Five Tribes\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/5058_t.jpg\",\"5\":\"jogo/five-tribes\"},{\"1\":\"24635\",\"2\":\"Vampiro - Sozinho na Escuridão\",\"3\":\"Vampiro - Sozinho na Escuridão\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/24635_t.jpg\",\"5\":\"jogo/vampiro-sozinho-na-escuridao\"},{\"1\":\"54680\",\"2\":\"Oeste Sombrio\",\"3\":\"Oeste Sombrio\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/54680_t.jpg\",\"5\":\"jogo/oeste-sombrio\"},{\"1\":\"8627\",\"2\":\"Through The Ages: Uma Nova História da Civilização\",\"3\":\"Through the Ages: A New Story of Civilization\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/8627_t.jpg\",\"5\":\"jogo/through-the-ages-a-new-story-of-civilization\"},{\"1\":\"14836\",\"2\":\"Lenda dos Cinco Anéis 4ª Edição RPG\",\"3\":\"Legend of the Five Rings 4th Edition RPG\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/14836_t.jpg\",\"5\":\"jogo/legend-of-the-five-rings-4th-edition-rpg\"},{\"1\":\"15490\",\"2\":\"Nemesis\",\"3\":\"Nemesis\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/15490_t.jpg\",\"5\":\"jogo/nemesis\"},{\"1\":\"33119\",\"2\":\"Hegemony: Conduza Sua Classe À Vitória\",\"3\":\"Hegemony: Lead Your Class to Victory\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/33119_t.jpg\",\"5\":\"jogo/hegemony-lead-your-class-to-victory\"},{\"1\":\"23742\",\"2\":\"Notequest\",\"3\":\"Notequest\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/23742_t.jpg\",\"5\":\"jogo/notequest\"},{\"1\":\"11178\",\"2\":\"Clank!: Uma Aventura de Construção de Baralho\",\"3\":\"Clank!: A Deck-Building Adventure\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/11178_t.jpg\",\"5\":\"jogo/clank-a-deck-building-adventure\"},{\"1\":\"14816\",\"2\":\"Numenera\",\"3\":\"Numenera\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/14816_t.jpg\",\"5\":\"jogo/numenera\"},{\"1\":\"25979\",\"2\":\"7 Wonders: Segunda Edição\",\"3\":\"7 Wonders (Second Edition)\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/25979_t.jpg\",\"5\":\"jogo/7-wonders-second-edition\"},{\"1\":\"14605\",\"2\":\"O Mundo das Trevas\",\"3\":\"World of Darkness\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/14605_t.jpg\",\"5\":\"jogo/world-of-darkness\"},{\"1\":\"16910\",\"2\":\"A Cidade de Your Town\",\"3\":\"Graphic Novel Adventures: Your Town\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/16910_t.jpg\",\"5\":\"jogo/graphic-novel-adventures-your-town\"},{\"1\":\"14981\",\"2\":\"Azul\",\"3\":\"Azul\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/14981_t.jpg\",\"5\":\"jogo/azul\"},{\"1\":\"15097\",\"2\":\"Livro do Jogador (AD&D 2e Revisado)\",\"3\":\"Player's Handbook (AD&D 2e Revised)\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/15097_t.jpg\",\"5\":\"jogo/player-s-handbook-ad-d-2e-revised\"},{\"1\":\"170\",\"2\":\"Mage Knight Board Game\",\"3\":\"Mage Knight Board Game\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/170_t.jpg\",\"5\":\"jogo/mage-knight-board-game\"},{\"1\":\"25895\",\"2\":\"As Ruínas Perdidas de Arnak\",\"3\":\"Lost Ruins of Arnak\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/25895_t.jpg\",\"5\":\"jogo/lost-ruins-of-arnak\"},{\"1\":\"26472\",\"2\":\"Tormenta20: Livro Básico Edição de Luxo\",\"3\":\"Tormenta20 — Livro Básico Edição de Luxo\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/26472_t.jpg\",\"5\":\"jogo/tormenta20-livro-basico-edicao-de-luxo\"},{\"1\":\"1860\",\"2\":\"Caverna: The Cave Farmers\",\"3\":\"Caverna: The Cave Farmers\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/1860_t.jpg\",\"5\":\"jogo/caverna-the-cave-farmers\"},{\"1\":\"10405\",\"2\":\"Four Against Darkness - Edição Brasileira\",\"3\":\"Four Against Darkness\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/10405_t.jpg\",\"5\":\"jogo/four-against-darkness\"},{\"1\":\"16788\",\"2\":\"Everdell\",\"3\":\"Everdell\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/16788_t.jpg\",\"5\":\"jogo/everdell\"},{\"1\":\"22056\",\"2\":\"Tormenta 20: Livro Básico\",\"3\":\"Tormenta 20: Livro Básico\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/22056_t.jpg\",\"5\":\"jogo/tormenta-20-livro-basico\"},{\"1\":\"17609\",\"2\":\"Castelo Falkenstein: Livro de Regras\",\"3\":\"Castle Falkenstein\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/17609_t.jpg\",\"5\":\"jogo/castle-falkenstein\"},{\"1\":\"7231\",\"2\":\"Pandemic Legacy: 1ª Temporada\",\"3\":\"Pandemic Legacy: Season 1\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/7231_t.jpg\",\"5\":\"jogo/pandemic-legacy-season-1\"},{\"1\":\"18993\",\"2\":\"Barrage\",\"3\":\"Barrage\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/18993_t.jpg\",\"5\":\"jogo/barrage\"},{\"1\":\"14947\",\"2\":\"O Um Anel: Aventuras Além do Limiar do Ermo\",\"3\":\"The One Ring: Adventures over the Edge of the Wild\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/14947_t.jpg\",\"5\":\"jogo/the-one-ring-adventures-over-the-edge-of-the-wild\"},{\"1\":\"17554\",\"2\":\"Old Dragon Aprimorado\",\"3\":\"Old Dragon Aprimorado\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/17554_t.jpg\",\"5\":\"jogo/old-dragon-aprimorado\"},{\"1\":\"20444\",\"2\":\"Tainted Grail: A Queda de Avalon\",\"3\":\"Tainted Grail: The Fall of Avalon\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/20444_t.jpg\",\"5\":\"jogo/tainted-grail-the-fall-of-avalon\"},{\"1\":\"2194\",\"2\":\"Concordia\",\"3\":\"Concordia\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/2194_t.jpg\",\"5\":\"jogo/concordia\"},{\"1\":\"14517\",\"2\":\"FF 01 — O Feiticeiro da Montanha de Fogo\",\"3\":\"The Warlock of Firetop Mountain (I)\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/14517_t.jpg\",\"5\":\"jogo/the-warlock-of-firetop-mountain-i\"},{\"1\":\"9538\",\"2\":\"Anachrony\",\"3\":\"Anachrony\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/9538_t.jpg\",\"5\":\"jogo/anachrony\"},{\"1\":\"15752\",\"2\":\"Hora de Aventura: Roleplaying Game\",\"3\":\"Hora de Aventuras: Juego de Rol RPG\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/15752_t.jpg\",\"5\":\"jogo/hora-de-aventuras-juego-de-rol-rpg\"},{\"1\":\"32088\",\"2\":\"Arkham Horror: The Card Game (Revised Edition)\",\"3\":\"Arkham Horror: The Card Game (Revised Edition)\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/32088_t.jpg\",\"5\":\"jogo/arkham-horror-the-card-game-revised-edition\"},{\"1\":\"14601\",\"2\":\"Savage Worlds: Livro de Regras\",\"3\":\"Savage Worlds Deluxe\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/14601_t.jpg\",\"5\":\"jogo/savage-worlds-deluxe\"},{\"1\":\"32507\",\"2\":\"Ark Nova\",\"3\":\"Ark Nova\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/32507_t.jpg\",\"5\":\"jogo/ark-nova\"},{\"1\":\"32443\",\"2\":\"Licantropo - Maldição de Sangue\",\"3\":\"Licantropo - Maldição de Sangue\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/32443_t.jpg\",\"5\":\"jogo/licantropo-maldicao-de-sangue\"},{\"1\":\"14346\",\"2\":\"Brazil: Imperial\",\"3\":\"Brazil: Imperial\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/14346_t.jpg\",\"5\":\"jogo/brazil-imperial\"},{\"1\":\"22078\",\"2\":\"Ronin\",\"3\":\"Ronin\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/22078_t.jpg\",\"5\":\"jogo/ronin\"},{\"1\":\"13774\",\"2\":\"Dungeon Crawl Classics Role Playing Game - DCC RPG\",\"3\":\"Dungeon Crawl Classics Role Playing Game - DCC RPG\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/13774_t.jpg\",\"5\":\"jogo/dungeon-crawl-classics-role-playing-game-dcc-rpg\"},{\"1\":\"16085\",\"2\":\"Teotihuacan: City of Gods\",\"3\":\"Teotihuacan: City of Gods\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/16085_t.jpg\",\"5\":\"jogo/teotihuacan-city-of-gods\"},{\"1\":\"32444\",\"2\":\"Bruxo - Pacto das Sombras\",\"3\":\"Bruxo - Pacto das Sombras\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/32444_t.jpg\",\"5\":\"jogo/bruxo-pacto-das-sombras\"},{\"1\":\"134\",\"2\":\"Trajan\",\"3\":\"Trajan\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/134_t.jpg\",\"5\":\"jogo/trajan\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nCom base nessa informação, já temos acesso a lista de alguns jogos cadastrados no portal da Ludopedia, No entanto, ainda há o segundo elemento daquela lista que acabamos de parsear, `total`, que nos informa sobre a quantidade total de jogos cadastrados. Para pegar esta informação, basta mudarmos o _string_ que passamos para a função `pluck`, conforme apresentado abaixo.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# função para pegar a quantidade total de jogos disponiveis\npegar_total_jogos <- function(access_token) {\n  # faz um GET da pagina default dos jogos, parseia o conteudo e pega so o elemento\n  # da lista que contem a quantidade total de jogos cadastrados na base da Ludopedia\n  httr::GET('https://ludopedia.com.br/api/v1/jogos', \n            httr::add_headers(AUTHORIZATION = access_token)) %>% \n    httr::content() %>% \n    purrr::pluck('total') %>% \n    as.integer()\n}\n\n# pegando o total de jogos cadastrados na ludopedia\ntotal_de_jogos <- pegar_total_jogos(access_token = meu_token)\ntotal_de_jogos\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 58640\n```\n:::\n:::\n\n\nComo podemos notar, existem 58.640 cadastrados no portal da Ludopedia. Como temos acesso à 100 jogos por página da requisição, isto nos diz que precisaremos percorrer 58.640 / 100 = 586.4 = 587 páginas para obter a lista de __todos__ os jogos disponíveis (_i.e._, total de jogos dividido por 100, arredondando o resultado para cima). Assim, bastaria iterar os valores do argumento `pagina` da função `pegar_lista_jogos` do índice 1 até o número de páginas definido acima dentro de um `purrr::map`, por exemplo.\n\nUsamos o _endpoint_ da lista de jogos cadastrados para obter os nomes dos jogos e o seu identificador numérico único, o que é ótimo se não tivermos noção do nome dos jogos nem nada do gênero. Por outro lado, se tivermos um jogo específico em mente e quisermos obter apenas o seu identificador numérico, podemos passar o seu nome como um argumento para a `query` do mesmo _endpoint_ (`search = <nome do jogo>`). Eu empacotei essa aplicação do _endpoint_ em outra função, e usei como exemplo a busca pelo identificador do jogo `Ticket to Ride` (que usamos como exemplo lá no post sobre a API XML do BoardGameGeek). O resultado que obtivemos (já parseado) revela que este uso do _endpoint_ traz todos os jogos que, de alguma forma, tenham haver com aquele que buscamos - no nosso caso, também tivemos acesso à todas as expansões e implementações do jogo base.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# função para pegar a lista de jogos que contenham uma string especifica no nome\npegar_id_jogo <- function(nome_do_jogo, access_token) {\n  # pegando os jogos da pagina selecionada\n  httr::GET('https://ludopedia.com.br/api/v1/jogos', \n            httr::add_headers(AUTHORIZATION = access_token),\n            query = list(search = nome_do_jogo))\n}\n\n# pegando o exemplo do ticket to ride, como no scrapper do boardgamegekk\npegar_id_jogo(nome_do_jogo = 'Ticket to Ride', access_token = meu_token) %>% \n  # pegando o content da resposta\n  content(simplifyDataFrame = TRUE) %>% \n  # extraindo o elemento jogos de dentro da lista\n  pluck('jogos') %>% \n  # criando a tabela para a visualização na página\n  rmarkdown::paged_table()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"id_jogo\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"nm_jogo\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"nm_original\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"thumb\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"link\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"2\",\"2\":\"Ticket to Ride\",\"3\":\"Ticket to Ride\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/2_t.jpg\",\"5\":\"jogo/ticket-to-ride\",\"_rn_\":\"1\"},{\"1\":\"133\",\"2\":\"Ticket to Ride: Europa\",\"3\":\"Ticket to Ride: Europe\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/133_t.jpg\",\"5\":\"jogo/ticket-to-ride-europe\",\"_rn_\":\"2\"},{\"1\":\"29022\",\"2\":\"Ticket to Ride: Europa - 15 Anos\",\"3\":\"Ticket to Ride: Europe – 15th Anniversary\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/29022_t.jpg\",\"5\":\"jogo/ticket-to-ride-europe-15th-anniversary\",\"_rn_\":\"3\"},{\"1\":\"4176\",\"2\":\"Ticket to Ride: 10th Anniversary\",\"3\":\"Ticket to Ride: 10th Anniversary\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/4176_t.jpg\",\"5\":\"jogo/ticket-to-ride-10th-anniversary\",\"_rn_\":\"4\"},{\"1\":\"10799\",\"2\":\"Ticket to Ride: Trilhos e Velas\",\"3\":\"Ticket to Ride: Rails & Sails\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/10799_t.jpg\",\"5\":\"jogo/ticket-to-ride-rails-sails\",\"_rn_\":\"5\"},{\"1\":\"958\",\"2\":\"Ticket to Ride: Países Nórdicos\",\"3\":\"Ticket to Ride: Nordic Countries\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/958_t.jpg\",\"5\":\"jogo/ticket-to-ride-nordic-countries\",\"_rn_\":\"6\"},{\"1\":\"53416\",\"2\":\"Ticket to Ride Legacy: Lendas do Oeste\",\"3\":\"Ticket to Ride Legacy: Legends of the West\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/53416_t.jpg\",\"5\":\"jogo/ticket-to-ride-legacy-legends-of-the-west\",\"_rn_\":\"7\"},{\"1\":\"18431\",\"2\":\"Ticket to Ride: New York\",\"3\":\"Ticket to Ride: New York\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/18431_t.jpg\",\"5\":\"jogo/ticket-to-ride-new-york\",\"_rn_\":\"8\"},{\"1\":\"21961\",\"2\":\"Ticket to Ride: Londres\",\"3\":\"Ticket to Ride: London\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/21961_t.jpg\",\"5\":\"jogo/ticket-to-ride-london\",\"_rn_\":\"9\"},{\"1\":\"14933\",\"2\":\"Ticket to Ride: Alemanha\",\"3\":\"Ticket to Ride: Germany\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/14933_t.jpg\",\"5\":\"jogo/ticket-to-ride-germany\",\"_rn_\":\"10\"},{\"1\":\"957\",\"2\":\"Ticket to Ride: Märklin\",\"3\":\"Ticket to Ride: Märklin\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/957_t.jpg\",\"5\":\"jogo/ticket-to-ride-marklin\",\"_rn_\":\"11\"},{\"1\":\"12719\",\"2\":\"Ticket to Ride: Primeira Viagem\",\"3\":\"Ticket to Ride: First Journey (Europe)\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/12719_t.jpg\",\"5\":\"jogo/ticket-to-ride-first-journey-europe\",\"_rn_\":\"12\"},{\"1\":\"35958\",\"2\":\"Ticket to Ride: San Francisco\",\"3\":\"Ticket to Ride: San Francisco\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/35958_t.jpg\",\"5\":\"jogo/ticket-to-ride-san-francisco\",\"_rn_\":\"13\"},{\"1\":\"24692\",\"2\":\"Ticket to Ride: Amsterdam\",\"3\":\"Ticket to Ride: Amsterdam\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/24692_t.jpg\",\"5\":\"jogo/ticket-to-ride-amsterdam\",\"_rn_\":\"14\"},{\"1\":\"11170\",\"2\":\"Ticket to Ride: First Journey (U.S.)\",\"3\":\"Ticket to Ride: First Journey (U.S.)\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/11170_t.jpg\",\"5\":\"jogo/ticket-to-ride-first-journey-u-s\",\"_rn_\":\"15\"},{\"1\":\"960\",\"2\":\"Ticket to Ride: The Card Game\",\"3\":\"Ticket to Ride: The Card Game\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/960_t.jpg\",\"5\":\"jogo/ticket-to-ride-the-card-game\",\"_rn_\":\"16\"},{\"1\":\"37415\",\"2\":\"Ticket to Ride: Trem Fantasma\",\"3\":\"Ticket To Ride: Ghost Train\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/37415_t.jpg\",\"5\":\"jogo/ticket-to-ride-ghost-train\",\"_rn_\":\"17\"},{\"1\":\"18311\",\"2\":\"Ticket To Ride Demo\",\"3\":\"Ticket To Ride Demo\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/18311_t.jpg\",\"5\":\"jogo/ticket-to-ride-demo\",\"_rn_\":\"18\"},{\"1\":\"52446\",\"2\":\"Ticket to Ride: Berlin\",\"3\":\"Ticket to Ride: Berlin\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/52446_t.jpg\",\"5\":\"jogo/ticket-to-ride-berlin\",\"_rn_\":\"19\"},{\"1\":\"41028\",\"2\":\"Ticket to Ride: Northern Lights\",\"3\":\"Ticket to Ride: Northern Lights\",\"4\":\"https://storage.googleapis.com/ludopedia-capas/41028_t.jpg\",\"5\":\"jogo/ticket-to-ride-northern-lights\",\"_rn_\":\"20\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nAcredito que estas são as funcionalidades básicas mais importantes deste _endpoint_. Vamos passar ao próximo!\n\n## Pegando as informações de um jogo\n\nO outro _endpoint_ que exploraremos é aquele que traz os metadados dos jogos de tabuleiro, e que faz uso do identificador numérico do jogo diretamente na `url` da requisição. Desta forma, as informações da lista de jogos cadastrados no portal da Ludopedia passa a ser muito importante para utilizarmos este _endpoint_. Tendo isto em mente, vamos preparar a função `pegar_infos_jogo` adicionando um argumento que receberá o identificador do jogo (`id_jogo`) que buscaremos - novamente, utilizando o `header` com o token de acesso e salvando o arquivo JSON de resposta em disco para usarmos depois. Como exemplo, vamos usar essa função para pegar os metadados do `Ticket do Ride`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# função para pegar as informações de um jogo\npegar_infos_jogo <- function(id_jogo, access_token, path_salvar = NULL) {\n  # pegando os detalhes do jogo\n  httr::GET(url = stringr::str_glue('https://ludopedia.com.br/api/v1/jogos/{id_jogo}'), \n            add_headers(AUTHORIZATION = access_token),\n            write_disk(path = stringr::str_glue(path_salvar, '/info_do_jogo_{id_jogo}.json'),\n                       overwrite = TRUE))\n}\n\n# pegando as informações do Ticket to Ride\nmetadados <- pegar_infos_jogo(\n  id_jogo = 2, \n  access_token = meu_token, \n  path_salvar = path_para_metadata\n)\n```\n:::\n\n\nVamos dar uma olhada na estrutura do arquivo JSON que recebemos como resposta, de forma a saber o que teremos que parsear.\n\n\n::: {.cell}\n\n```{.r .cell-code}\njsonlite::read_json(path = dir_ls(path_para_metadata), simplifyDataFrame = TRUE) %>% \n  glimpse\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nList of 21\n $ id_jogo         : int 2\n $ nm_jogo         : chr \"Ticket to Ride\"\n $ thumb           : chr \"https://storage.googleapis.com/ludopedia-capas/2_t.jpg\"\n $ tp_jogo         : chr \"b\"\n $ link            : chr \"https://ludopedia.com.br/jogo/ticket-to-ride\"\n $ ano_publicacao  : int 2004\n $ ano_nacional    : int 2014\n $ qt_jogadores_min: int 2\n $ qt_jogadores_max: int 5\n $ mecanicas       :'data.frame':\t2 obs. of  2 variables:\n  ..$ id_mecanica: int [1:2] 3 18\n  ..$ nm_mecanica: chr [1:2] \"Gerenciamento de Mãos\" \"Construção de Redes e Rotas\"\n $ categorias      :'data.frame':\t1 obs. of  2 variables:\n  ..$ id_categoria: int 111\n  ..$ nm_categoria: chr \"Jogo de Entrada\"\n $ temas           :'data.frame':\t1 obs. of  2 variables:\n  ..$ id_tema: int 27\n  ..$ nm_tema: chr \"Transportes\"\n $ artistas        :'data.frame':\t2 obs. of  2 variables:\n  ..$ id_profissional: int [1:2] 6 5\n  ..$ nm_profissional: chr [1:2] \"Julien Delval\" \"Cyrille Daujean\"\n $ designers       :'data.frame':\t1 obs. of  2 variables:\n  ..$ id_profissional: int 4\n  ..$ nm_profissional: chr \"Alan R. Moon\"\n $ vl_tempo_jogo   : int 45\n $ idade_minima    : int 8\n $ qt_tem          : int 4160\n $ qt_teve         : int 494\n $ qt_favorito     : int 545\n $ qt_quer         : int 2207\n $ qt_jogou        : int 5280\n```\n:::\n:::\n\n\nComo podemos ver, existem duas principais estruturas de dados no arquivo. Em uma destas estruturas estão as informações armazenadas em vetores com um único elemento, como o ano de publicação do jogo, informações sobre quantidade de jogadores e título do jogo. A outra estrutura existente no arquivo são algumas informações armazenadas como `data.frame`, como as informações da mecânica de jogo, os temas e nome dos criadores do jogo. Estas informações estão nesta estrutura pois elas tendem a ser naturalmente multidimensionais, e possivelmente é mais fácil armazená-las em uma estrutura na qual você consiga discriminar o metadado linha a linha. Dada a natureza destas duas estruturas de dados, podemos parsear a primeira delas de forma bem simples, usando a função `purrr::discard` para descartar todos os elementos do arquivo JSON que sejam um `data.frame` (_i.e._, empregando o teste lógico `is.data.frame`), e juntando todos os elementos restantes coluna à coluna (_i.e._, usando um `bind_cols`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\njsonlite::read_json(path = dir_ls(path_para_metadata), simplifyDataFrame = TRUE) %>% \n  # descartando todos os elementos que sao listas\n  discard(is.data.frame) %>% \n  # juntando cada elemento da lista coluna a coluna\n  bind_cols() %>% \n  # visualizando a tabela\n  rmarkdown::paged_table()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"id_jogo\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"nm_jogo\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"thumb\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"tp_jogo\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"link\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"ano_publicacao\"],\"name\":[6],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"ano_nacional\"],\"name\":[7],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"qt_jogadores_min\"],\"name\":[8],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"qt_jogadores_max\"],\"name\":[9],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"vl_tempo_jogo\"],\"name\":[10],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"idade_minima\"],\"name\":[11],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"qt_tem\"],\"name\":[12],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"qt_teve\"],\"name\":[13],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"qt_favorito\"],\"name\":[14],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"qt_quer\"],\"name\":[15],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"qt_jogou\"],\"name\":[16],\"type\":[\"int\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"2\",\"2\":\"Ticket to Ride\",\"3\":\"https://storage.googleapis.com/ludopedia-capas/2_t.jpg\",\"4\":\"b\",\"5\":\"https://ludopedia.com.br/jogo/ticket-to-ride\",\"6\":\"2004\",\"7\":\"2014\",\"8\":\"2\",\"9\":\"5\",\"10\":\"45\",\"11\":\"8\",\"12\":\"4160\",\"13\":\"494\",\"14\":\"545\",\"15\":\"2207\",\"16\":\"5280\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nA informação que buscaremos extrair da segunda estrutura de dados é àquela associada às colunas que têm o prefixo `nm_` que contém as _strings_ que definem àquela entidade. Note que em todos esses casos nós estamos interessados em extrair as informações que estão na segunda coluna de cada `data.frame` e que, portanto, não precisamos focar no nome da coluna em si para ter acesso à elas, apenas na sua posição. Além disso, pode existir mais de um elemento nesta coluna, e precisaremos concatenar estas informações em um _string_ só. Assim, usaremos a função `purrr::keep` para reter todos os elementos que são um `data.frame` e, então, extrairemos a segunda coluna de cada uma delas mapeando a função `purrr::pull`. Finalmente, mapearemos um `paste0` à cada elemento da lista para concatenar o seu conteúdo a um _string_ só, e usaremos um `bind_cols` para colocar tudo como um `tibble`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# lendo o arquivo JSON com os metadados do jogo\njsonlite::read_json(path = dir_ls(path_para_metadata), simplifyDataFrame = TRUE) %>% \n  # retendo apenas os elementos que sao dataframes\n  keep(is.data.frame) %>% \n  # pegando a coluna que contem os o nome do metadado\n  map(.f = pull, var = 2) %>% \n  # passando o vetor de strings para um unico string por elemento da lista\n  map(.f = paste0, collapse = ';') %>% \n  # juntando os elementos da lista coluna a coluna\n  bind_cols() %>% \n  # visualizando a tabela\n  rmarkdown::paged_table()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"mecanicas\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"categorias\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"temas\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"artistas\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"designers\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"Gerenciamento de Mãos;Construção de Redes e Rotas\",\"2\":\"Jogo de Entrada\",\"3\":\"Transportes\",\"4\":\"Julien Delval;Cyrille Daujean\",\"5\":\"Alan R. Moon\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nComo estes dois passos são baseados no mesmo dado e devem compor o mesmo parser, vamos empacotá-los em uma única função, `parser_infos_jogos`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# função para parsear as informações de um jogo\nparser_infos_jogo <- function(target_path){\n  # carregando o arquivo JSON com os metadados do jogo\n  metadados <- jsonlite::read_json(path = target_path, simplifyDataFrame = TRUE)\n  # colocando todos os metadados em um tibble\n  bind_cols(\n    # parseando as informacoes que estao organizadas como strings ou numeros\n    metadados %>% \n      # descartando todos os elementos que sao dataframes\n      discard(is.data.frame) %>% \n      # juntando cada elemento da lista coluna a coluna\n      bind_cols(),\n    # parseando as informacoes que estao organizadas como uma lista de dataframes\n    metadados %>% \n      # retendo apenas os elementos que sao dataframes\n      keep(is.data.frame) %>% \n      # pegando a coluna que contem os o nome do metadado\n      map(.f = pull, var = 2) %>% \n      # passando o vetor de strings para um unico string por elemento da lista\n      map(.f = paste0, collapse = ';') %>% \n      # juntando os elementos da lista coluna a coluna\n      bind_cols()\n  )\n}\n\n## usando a função para parsear todas as informações\nparser_infos_jogo(target_path = dir_ls(path_para_metadata)) %>% \n  # visualizando a tabela completa\n  rmarkdown::paged_table()\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"id_jogo\"],\"name\":[1],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"nm_jogo\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"thumb\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"tp_jogo\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"link\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"ano_publicacao\"],\"name\":[6],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"ano_nacional\"],\"name\":[7],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"qt_jogadores_min\"],\"name\":[8],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"qt_jogadores_max\"],\"name\":[9],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"vl_tempo_jogo\"],\"name\":[10],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"idade_minima\"],\"name\":[11],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"qt_tem\"],\"name\":[12],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"qt_teve\"],\"name\":[13],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"qt_favorito\"],\"name\":[14],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"qt_quer\"],\"name\":[15],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"qt_jogou\"],\"name\":[16],\"type\":[\"int\"],\"align\":[\"right\"]},{\"label\":[\"mecanicas\"],\"name\":[17],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"categorias\"],\"name\":[18],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"temas\"],\"name\":[19],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"artistas\"],\"name\":[20],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"designers\"],\"name\":[21],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"2\",\"2\":\"Ticket to Ride\",\"3\":\"https://storage.googleapis.com/ludopedia-capas/2_t.jpg\",\"4\":\"b\",\"5\":\"https://ludopedia.com.br/jogo/ticket-to-ride\",\"6\":\"2004\",\"7\":\"2014\",\"8\":\"2\",\"9\":\"5\",\"10\":\"45\",\"11\":\"8\",\"12\":\"4160\",\"13\":\"494\",\"14\":\"545\",\"15\":\"2207\",\"16\":\"5280\",\"17\":\"Gerenciamento de Mãos;Construção de Redes e Rotas\",\"18\":\"Jogo de Entrada\",\"19\":\"Transportes\",\"20\":\"Julien Delval;Cyrille Daujean\",\"21\":\"Alan R. Moon\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\nPronto! Com isso podemos ter acesso às informações que caracterizam cada um dos jogos de tabuleiro cadastrados no portal da Ludopedia.\n\n## Outros usos da API\n\nNo momento em que escrevo este post, a API da Ludopedia ainda está em fase de desenvolvimento e, portanto, existem algumas funcionalidades que estão previstas mas ainda não foram implementadas. De toda forma, no estado atual dela também podemos ter acesso à uma informação muito interessante: à coleção de jogos de tabuleiro de cada usuário. Este dado é legal pois ele traz coisas como as notas que a pessoa usuária deu à cada jogo, os comentários que a pessoa usuária fez sobre ele, se a pessoa tem ou não aquele jogo e coisas do gênero. Assim, ainda que a API não esteja completa, ela tem muitos outros potenciais de uso para a análise de dados.\n\nUm exemplo de uso daqueles dados poderia ser na criação de algum tipo de sistema de recomendação, uma vez que podemos mapear as notas dadas à cada jogo de tabuleiro por cada um dos usuários. Não é o meu intuito detalhar aqui como usar a API para extrair este tipo de informação, mas podemos ter uma visão bem alto nível através da documentação da API: usamos um _endpoint_ para extrair a coleção de jogos de uma pessoa usuária qualquer através do seu identificador (_i.e._, `https://ludopedia.com.br/api/v1/colecao`); este identificador, por sua vez, pode ser extraído a partir de um outro _endpoint_, que traz a lista de usuários cadastrados no portal (_i.e._, `https://ludopedia.com.br/api/v1/usuarios`); por fim, temos acesso a um máximo de 100 jogos por vez da coleção de cada pessoa, e precisaremos usar o mesmo método para a paginação das _querys_ para extrair a coleção completa de cada usuário - e é possível determinar o tamanho da coleção de cada usuário diretamente através de um outro _endpoint_ (_i.e._, `https://ludopedia.com.br/api/v1/colecao/count`). É claro que precisaremos aplicar algum tratamento aos dados que a API nos retorna para chegar à estrutura necessária para um sistema de recomendação, mas acredito que dê para pegar a ideia geral aqui.\n\n# Dicionário de Dados\n\nComo a ideia é utilizar os dados dessa API no futuro, vou deixar aqui um dicionário para explicar as informações dos metadados que temos disponíveis - de forma similar ao que fiz para a API do BoardGameGeek. \n\n+ **id_jogo:** identificador numérico único do jogo;  \n+ **nm_jogo:** nome do jogo em português;  \n+ **thumb:** link para a imagem de capa do jogo;  \n+ **tp_jogo:** indicador do tipo de jogo - jogo base (b) ou expansão (e);  \n+ **link:** link para a página do jogo dentro do domínio da Ludopedia;  \n+ **ano_publicacao:** ano de criação do jogo;  \n+ **ano_nacional:** ano de lançamento do jogo no Brasil - é `NA` caso o jogo não tenha sido lançado por aqui;  \n+ **qt_jogadores_min:** quantidade mínima de jogadores necessária para o jogo;  \n+ **qt_jogadores_max:** quantidade máxima de jogadores sustentada pelo jogo;  \n+ **vl_tempo_jogo:** duração de uma partida do jogo;  \n+ **idade_minima:** idade mínima sugerida para o jogo;  \n+ **qt_tem:** quantidade de usuários que têm o jogo;\n+ **qt_teve:** quantidade de usuários que já tiveram o jogo;\n+ **qt_favorito:** quantidade de usuários que têm este jogo como favorito;  \n+ **qt_quer:** quantidade de usuários que estão em busca do jogo;  \n+ **qt_jogou:** quantidade de usuários que jogou o jogo;  \n+ **mecanicas:** nomes da mecânicas de jogo;  \n+ **categorias:** nome das famílias associadas ao jogo;  \n+ **temas:** nomes das temáticas associadas ao jogo;  \n+ **designers:** nome das pessoas do autoras do jogo;  \n+ **artistas:** nome das pessoas artistas responsáveis pela arte jogo.  \n\n# Conclusões\n\nEste post focou em demonstrar como interagir com a API da Ludopedia, indo do processo de autenticação, à requisição e o parser dos dados. Focamos exclusivamente nos _endpoints_ para a aquisição dos dados dos jogos de tabuleiro, mas o mesmo processo pode ser utilizado para a aquisição de outros tipos de dados, tais como a lista lista de usuários, suas coleções e informações das partidas. Como vimos através deste exercício, essa API fornece uma forma bastante amigável de acessarmos dados muito relevantes para muitos tipos de análise.\n\nEsta API é bastante diferente daquela oferecidade pelo BoardGameGeek, não só em termos de uso, mas também dos dados fornecidos. Neste contexto, pude notar que os metadados dos jogos de tabuleiro oferecidos pela API da Ludopedia representam um subconjunto daqueles disponíveis na página de cada jogo dentro do próprio portal, assim como daqueles que estão disponíveis através da API do BoardGameGeek. Comparando as informações àquelas no próprio portal, por exemplo, a API da Ludopedia não traz nada sobre as editoras, domínios e nem dependência do idioma. Nesta mesma linha, a API do BoardGameGeek fornece as informações das notas dos jogos junto dos metadados, ao contrário desta API que exploramos. Assim, me parece que ainda há espaço para que ela possa evoluir.\n\nPor fim, o fato da API não fornecer tantas informações como àquelas do BoardGameGeek não é um problema. O principal motivo para isso é que é possível integrar as duas fontes de informação, usando uma para enriquecer a outra - como veremos através das análises de dados que faremos em posts futuros.\n\n# Possíveis Extensões\n\nAcredito que grande parte das extensões que listei no post sobre a API do BoardGameGeek valha para este também - além, é claro, do fato de que várias destas extensões são co-dependentes entre os dois posts. De toda forma, acredito que a principal extensão relacionada especificamente a este post seria a da implementação das funções para acessar os dados de outros _endpoints_, juntamente com os seus respectivos parsers.\n\nDúvidas, sugestões ou críticas? É só me procurar pelo e-mail ou GitHub!",
    "supporting": [
      "index_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"../../site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\r\n<script src=\"../../site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}